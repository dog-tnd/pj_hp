---
import Layout from '../../layouts/Layout.astro';
import Menu from '../../components/menu';
import TwoLine from '../../components/TwoLine.astro';
import { formatDate } from '../../utils/date';

// 追加：ブログ記事の型定義（共通）
interface BlogPost {
  frontmatter: {
    title: string;
    description: string;
    author: string;
    role: string;
    authorImage: string;
    date: string;
    image: string;
    tags?: string[];
  };
  url: string;
  file: string;
  Content: any;
}

// 型定義
export interface Props {
  post: {
    Content: any;
    frontmatter: {
      title: string;
      description: string;
      author: string;
      role: string;
      authorImage: string;
      date: string;
      image: string;
      tags?: string[];
    };
  };
  nextPost?: {
    url: string;
    title: string;
  };
  prevPost?: {
    url: string;
    title: string;
  };
  relatedPosts?: Array<{
    url: string;
    title: string;
    description: string;
    image: string;
    date: string;
  }>;
}

// 記事データの取得（型キャストを追加）
export async function getStaticPaths(): Promise<any[]> {
  const posts = await Astro.glob('../../content/blog/*.md') as BlogPost[];
  
  return posts.map((post, index) => {
    // 前後の記事を取得
    const prevPost = index > 0 ? {
      url: `/blog/${posts[index - 1].file.split('/').pop()?.replace('.md', '')}`,
      title: posts[index - 1].frontmatter.title
    } : undefined;
    
    const nextPost = index < posts.length - 1 ? {
      url: `/blog/${posts[index + 1].file.split('/').pop()?.replace('.md', '')}`,
      title: posts[index + 1].frontmatter.title
    } : undefined;
    
    // 関連記事を取得（同じタグを持つ記事、または最新の記事）
    const relatedPosts = posts
      .filter((p, i) => {
        return i !== index && (
          (post.frontmatter.tags && p.frontmatter.tags &&
           post.frontmatter.tags.some((tag: string) => p.frontmatter.tags!.includes(tag))) ||
          i < 3
        );
      })
      .slice(0, 3)
      .map(p => ({
        url: `/blog/${p.file.split('/').pop()?.replace('.md', '')}`,
        title: p.frontmatter.title,
        description: p.frontmatter.description,
        image: p.frontmatter.image,
        date: p.frontmatter.date
      }));
    
    return {
      params: {
        slug: post.file.split('/').pop()?.replace('.md', '')
      },
      props: {
        post: {
          Content: post.Content,
          frontmatter: post.frontmatter
        },
        prevPost,
        nextPost,
        relatedPosts
      },
    };
  });
}

const { post, prevPost, nextPost, relatedPosts } = Astro.props;
const { Content } = post;

// 記事の読了時間を計算（平均読速度: 500文字/分）
const textContent = post.frontmatter.description || '';
const wordCount = textContent.length;
const readingTime = Math.max(1, Math.round(wordCount / 500));

// 現在のURLを取得（ソーシャルシェア用）
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// 目次を生成するための関数（例）
const generateTableOfContents = () => {
  const headings = document.querySelectorAll('h2, h3, h4');
  headings.forEach(heading => {
    if (heading.textContent) {
      heading.id = (heading.textContent || '').toLowerCase().replace(/\s+/g, '-');
    }
  });
};
---

<Layout 
  title={`${post.frontmatter.title} | TND - 東京理科大学プログラミングサークル`}
  description={post.frontmatter.description}
  image={post.frontmatter.image}
  canonicalURL={canonicalURL.href}
  keywords={post.frontmatter.tags ? ["TND", "東京理科大学", "プログラミングサークル", ...post.frontmatter.tags] : ["TND", "東京理科大学", "プログラミングサークル"]}
  author={post.frontmatter.author}
  type="article"
>
  <!-- 追加のブログ記事用構造化データ -->
  <script type="application/ld+json" slot="head">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": post.frontmatter.title,
      "description": post.frontmatter.description,
      "image": post.frontmatter.image,
      "author": {
        "@type": "Person",
        "name": post.frontmatter.author,
        "image": post.frontmatter.authorImage,
        "jobTitle": post.frontmatter.role
      },
      "publisher": {
        "@type": "Organization",
        "name": "TND",
        "logo": {
          "@type": "ImageObject",
          "url": "https://tus-tnd.com/logo.svg"
        }
      },
      "datePublished": post.frontmatter.date,
      "dateModified": post.frontmatter.date,
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": canonicalURL.href
      }
    }
  </script>

  <header>
    <TwoLine />
  </header>

  <main class="mx-auto max-w-7xl px-4 py-12 sm:px-6 lg:px-8">
    <div class="container flex flex-col md:flex-row items-center gap-10 relative pt-20">
      <Menu client:load />
    </div>

    <article class="max-w-3xl mx-auto bg-white rounded-xl shadow-lg overflow-hidden">
      <!-- ヘッダー画像 -->
      <div class="relative h-64 sm:h-80 md:h-96 w-full">
        <img 
          src={post.frontmatter.image || '/placeholder.svg'} 
          alt={post.frontmatter.title}
          class="w-full h-full object-cover"
        />
        
        <!-- 記事タイトルをヘッダー画像の上に重ねる -->
        <div class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex flex-col justify-end p-6">
          <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold text-white mb-2 drop-shadow-sm">
            {post.frontmatter.title}
          </h1>
          
          <!-- タグ（存在する場合） -->
          {post.frontmatter.tags && (
            <div class="flex flex-wrap gap-2 mb-3">
              {post.frontmatter.tags.map((tag: string) => (
                <a 
                  href={`/blog/tag/${tag}`} 
                  class="inline-block px-3 py-1 text-xs font-medium bg-blue-500/80 text-white rounded-full hover:bg-blue-600/80 transition-colors"
                >
                  #{tag}
                </a>
              ))}
            </div>
          )}
        </div>
      </div>

      <!-- 記事メタ情報 -->
      <div class="p-6 sm:p-8">
        <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-8 gap-4">
          <div class="flex items-center gap-4">
            <img 
              src={post.frontmatter.authorImage || '/placeholder.svg?width=48&height=48'} 
              alt={post.frontmatter.author}
              class="w-12 h-12 rounded-full object-cover"
            />
            <div>
              <p class="font-medium">{post.frontmatter.author}</p>
              <p class="text-sm text-gray-500">{post.frontmatter.role}</p>
            </div>
          </div>
          <div class="flex items-center gap-4">
            <time class="text-blue-400 text-sm">{post.frontmatter.date}</time>
            <span class="text-gray-500 text-sm flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              {readingTime}分で読めます
            </span>
          </div>
        </div>

        <!-- 目次（一時的に非表示）
        <div id="table-of-contents" class="mb-8 p-4 bg-gray-50 rounded-lg hidden">
          <h2 class="text-lg font-semibold mb-2">目次</h2>
          <div id="toc-content"></div>
        </div>
        -->

        <!-- 記事本文 -->
        <div class="prose prose-lg max-w-none">
          <Content />
        </div>
        
        <!-- ソーシャルシェアボタン -->
        <div class="mt-10 pt-6 border-t border-gray-200">
          <h3 class="text-lg font-semibold mb-4">この記事をシェアする</h3>
          <div class="flex flex-wrap gap-3">
            <!-- Twitter -->
            <a 
              href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(post.frontmatter.title)}&url=${encodeURIComponent(canonicalURL.toString())}`}
              target="_blank" 
              rel="noopener noreferrer"
              class="inline-flex items-center justify-center w-10 h-10 bg-[#1DA1F2] text-white rounded-full hover:opacity-90 transition-opacity"
              aria-label="Twitterでシェア"
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path>
              </svg>
            </a>
            
            <!-- Facebook -->
            <a 
              href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(canonicalURL.toString())}`}
              target="_blank" 
              rel="noopener noreferrer"
              class="inline-flex items-center justify-center w-10 h-10 bg-[#1877F2] text-white rounded-full hover:opacity-90 transition-opacity"
              aria-label="Facebookでシェア"
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path fill-rule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clip-rule="evenodd"></path>
              </svg>
            </a>
            
            <!-- LinkedIn -->
            <a 
              href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(canonicalURL.toString())}`}
              target="_blank" 
              rel="noopener noreferrer"
              class="inline-flex items-center justify-center w-10 h-10 bg-[#0A66C2] text-white rounded-full hover:opacity-90 transition-opacity"
              aria-label="LinkedInでシェア"
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z" clip-rule="evenodd"></path>
              </svg>
            </a>
            
            <!-- コピーリンク -->
            <button 
              id="copy-link"
              class="inline-flex items-center justify-center w-10 h-10 bg-gray-200 text-gray-700 rounded-full hover:bg-gray-300 transition-colors"
              aria-label="リンクをコピー"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </article>

    <!-- 前後の記事へのナビゲーション -->
    <div class="max-w-3xl mx-auto mt-8 grid grid-cols-1 md:grid-cols-3 gap-4">
      <div class="md:col-start-1">
        {prevPost && (
          <a 
            href={prevPost.url} 
            class="p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow flex items-start"
          >
            <div class="mr-3 text-gray-400">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
              </svg>
            </div>
            <div>
              <span class="block text-sm text-gray-500 mb-1">前の記事</span>
              <span class="font-medium text-gray-900 line-clamp-1">{prevPost.title}</span>
            </div>
          </a>
        )}
      </div>
      
      <div class="md:col-start-2 flex justify-center">
        <a 
          href="/blog" 
          class="inline-flex items-center px-6 py-3 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
        >
          <span class="text-gray-600">ブログ一覧へ戻る</span>
        </a>
      </div>
      
      <div class="md:col-start-3">
        {nextPost && (
          <a 
            href={nextPost.url} 
            class="p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow flex items-start justify-end"
          >
            <div class="text-right mr-3">
              <span class="block text-sm text-gray-500 mb-1">次の記事</span>
              <span class="font-medium text-gray-900 line-clamp-1">{nextPost.title}</span>
            </div>
            <div class="text-gray-400">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </div>
          </a>
        )}
      </div>
    </div>
    
    <!-- 関連記事 -->
    {relatedPosts && relatedPosts.length > 0 && (
      <div class="max-w-5xl mx-auto mt-16">
        <h2 class="text-2xl font-bold mb-6">関連記事</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          {relatedPosts.map((relatedPost) => (
            <a href={relatedPost.url} class="group">
              <article class="bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow h-full flex flex-col">
                <div class="aspect-video overflow-hidden">
                  <img 
                    src={relatedPost.image || '/placeholder.svg'} 
                    alt={relatedPost.title}
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                  />
                </div>
                <div class="p-4 flex-1 flex flex-col">
                  <div class="flex-1">
                    <h3 class="font-bold text-lg text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
                      {relatedPost.title}
                    </h3>
                    {relatedPost.description && (
                      <p class="text-gray-600 text-sm line-clamp-2 mb-3">
                        {relatedPost.description}
                      </p>
                    )}
                  </div>
                  <div class="flex items-center text-sm text-gray-500">
                    <time>{relatedPost.date}</time>
                  </div>
                </div>
              </article>
            </a>
          ))}
        </div>
      </div>
    )}
  </main>
  <footer class="mt-24 border-t border-gray-200 py-8">
    <div class="mx-auto max-w-7xl px-4 text-center sm:px-6 lg:px-8">
      <p class="text-sm text-gray-500">© 2025 TND All Rights Reserved.</p>
    </div>
  </footer>
</Layout>

<style>
  /* Markdownコンテンツのスタイリング */
  .prose {
    color: #374151;
  }
  .prose h2 {
    color: #111827;
    font-weight: 700;
    font-size: 1.5rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
    scroll-margin-top: 5rem;
  }
  .prose h3 {
    color: #111827;
    font-weight: 600;
    font-size: 1.25rem;
    margin-top: 1.6rem;
    margin-bottom: 0.8rem;
    scroll-margin-top: 5rem;
  }
  .prose p {
    margin-top: 1.25rem;
    margin-bottom: 1.25rem;
  }
  .prose a {
  color: #2563eb;            /* Tailwindの text-blue-600 相当の青色 */
  text-decoration: underline; /* 下線を追加 */
  transition: opacity 0.2s, color 0.2s;  /* ホバー時のスムーズな変化 */
  }

  .prose a:hover {
  opacity: 0.8; 
  }
  .prose pre {
    background-color: #1f2937;
    color: #e5e7eb;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
  }
  .prose code {
    color: #111827;
    font-weight: 600;
    font-size: 0.875em;
    background-color: #f3f4f6;
    padding: 0.2em 0.4em;
    border-radius: 0.25rem;
  }
  .prose pre code {
    color: inherit;
    background-color: transparent;
    padding: 0;
  }
  .prose img {
    border-radius: 0.5rem;
    margin: 2rem 0;
  }
  .prose blockquote {
    border-left: 4px solid #e5e7eb;
    padding-left: 1rem;
    font-style: italic;
    color: #6b7280;
  }
  .prose ul, .prose ol {
    margin-top: 1.25rem;
    margin-bottom: 1.25rem;
    padding-left: 1.625rem;
  }
  .prose li {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }
  .prose table {
    width: 100%;
    border-collapse: collapse;
    margin: 2rem 0;
  }
  .prose th {
    background-color: #f9fafb;
    font-weight: 600;
    text-align: left;
    padding: 0.75rem;
    border-bottom: 2px solid #e5e7eb;
  }
  .prose td {
    padding: 0.75rem;
    border-bottom: 1px solid #e5e7eb;
  }
  
  /* 目次のスタイル */
  #toc-content a {
    display: block;
    padding: 0.25rem 0;
    color: #4b5563;
    text-decoration: none;
  }
  #toc-content a:hover {
    color: #2563eb;
  }
  #toc-content .toc-h2 {
    font-weight: 500;
  }
  #toc-content .toc-h3 {
    padding-left: 1rem;
    font-size: 0.9rem;
  }
  #toc-content .toc-h4 {
    padding-left: 2rem;
    font-size: 0.85rem;
  }
  
  /* ホバーエフェクト */
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* スムーズスクロール */
  html {
    scroll-behavior: smooth;
  }
</style>

<script>
  // 目次の生成
  document.addEventListener('DOMContentLoaded', () => {
    /* 目次の生成（一時的に無効化）
    const article = document.querySelector('.prose');
    const tocContainer = document.getElementById('table-of-contents');
    const tocContent = document.getElementById('toc-content');
    
    if (article && tocContainer && tocContent) {
      const headings = article.querySelectorAll('h2, h3, h4');
      
      if (headings.length >= 3) {
        tocContainer.classList.remove('hidden');
        
        headings.forEach((heading) => {
          if (!heading.id) {
            heading.id = (heading.textContent || '').toLowerCase().replace(/\s+/g, '-');
          }
          
          const link = document.createElement('a');
          link.href = `#${heading.id}`;
          link.textContent = heading.textContent;
          link.classList.add(`toc-${heading.tagName.toLowerCase()}`);
          
          tocContent.appendChild(link);
        });
      }
    }
    */

    // リンクコピー機能（既存のコード）
    const copyButton = document.getElementById('copy-link');
    if (copyButton) {
      copyButton.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(window.location.href);
          
          // コピー成功時のフィードバック
          const originalHTML = copyButton.innerHTML;
          
          copyButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
          `;
          
          setTimeout(() => {
            copyButton.innerHTML = originalHTML;
          }, 2000);
        } catch (err) {
          console.error('クリップボードへのコピーに失敗しました:', err);
        }
      });
    }
    
    // コードブロックのシンタックスハイライト（もし必要なら）
    // ここにシンタックスハイライトのコードを追加
  });
</script>